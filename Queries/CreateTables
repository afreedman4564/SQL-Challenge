DROP VIEW IF EXISTS emp_view;
DROP VIEW IF EXISTS emp_1986;
DROP VIEW IF EXISTS dept_name_view;
DROP VIEW IF EXISTS dept_emp_count;
DROP VIEW IF EXISTS hercules;
DROP VIEW IF EXISTS sales_dept;
DROP VIEW IF EXISTS sales_dev_dept;
DROP TABLE IF EXISTS salaries;
DROP TABLE IF EXISTS dept_emp;
DROP TABLE IF EXISTS dept_manager;
DROP TABLE IF EXISTS departments;
DROP TABLE IF EXISTS employees;
DROP TABLE IF EXISTS titles;
DROP TABLE IF EXISTS salary_comb;
DROP TABLE IF EXISTS emp_salary;

-- departments table creation
CREATE TABLE departments (
dept_no VARCHAR(5) PRIMARY KEY,
dept_name VARCHAR (25))
;

COPY departments (dept_no, dept_name)
FROM 'C:\Users\freed\SQL-Challenge\EmployeeSQL\departments.csv' 
DELIMITER ','
CSV HEADER;

-- titles table creation
CREATE TABLE titles (
title_id VARCHAR PRIMARY KEY,
title VARCHAR (20))
;

COPY titles (title_id, title)
FROM 'C:\Users\freed\SQL-Challenge\EmployeeSQL\titles.csv' 
DELIMITER ','
CSV HEADER;

-- employees table creation
CREATE TABLE employees (
emp_no INT PRIMARY KEY,
emp_title_id VARCHAR(5) NOT NULL,
FOREIGN KEY (emp_title_id) REFERENCES titles(title_id),
birth_date DATE,
first_name VARCHAR(30),
last_name VARCHAR(30),
sex VARCHAR (1),
hire_date DATE)
;

COPY employees (emp_no, emp_title_id, birth_date, first_name, last_name, sex, hire_date)
FROM 'C:\Users\freed\SQL-Challenge\EmployeeSQL\employees.csv' 
DELIMITER ','
CSV HEADER;

-- salaries table creation
CREATE TABLE salaries (
emp_no INT NOT NULL,
FOREIGN KEY (emp_no) REFERENCES employees(emp_no),
salary int)
;

COPY salaries (emp_no, salary)
FROM 'C:\Users\freed\SQL-Challenge\EmployeeSQL\salaries.csv' 
DELIMITER ','
CSV HEADER;

-- use constraint to create primary key based on two features
CREATE TABLE dept_emp (
CONSTRAINT dept_emp_id PRIMARY KEY (emp_no, dept_no),
emp_no INT NOT NULL,
FOREIGN KEY (emp_no) REFERENCES employees(emp_no),
dept_no VARCHAR (5) NOT NULL,
FOREIGN KEY (dept_no) REFERENCES departments(dept_no))
;

COPY dept_emp (emp_no, dept_no)
FROM 'C:\Users\freed\SQL-Challenge\EmployeeSQL\dept_emp.csv' 
DELIMITER ','
CSV HEADER;

-- dept_manager table creation
CREATE TABLE dept_manager (
CONSTRAINT dept_mgr_id PRIMARY KEY (dept_no, emp_no),
dept_no VARCHAR(5) NOT NULL,
FOREIGN KEY (dept_no) REFERENCES departments(dept_no),
emp_no INT NOT NULL,
FOREIGN KEY (emp_no) REFERENCES employees(emp_no))
;

COPY dept_manager (dept_no, emp_no)
FROM 'C:\Users\freed\SQL-Challenge\EmployeeSQL\dept_manager.csv' 
DELIMITER ','
CSV HEADER;

-- BONUS. 
-- 1. Import the SQL database into Pandas.
-- 2. Create a histogram to visualize the most common salary ranges for employees.
-- o requires employees and salary data
-- 3. Create a bar chart of average salary by title.
-- o requires merging employee

-- Create table, merging employees, salary and titles on emp_no and title_id/emp_title_id respectively
-- Order by salary
CREATE TABLE salary_comb AS
SELECT e.emp_no, e.emp_title_id, s.salary, t.title,
CASE WHEN s.salary = 40000 THEN '40000'
	WHEN s.salary BETWEEN 40001 AND 49999 THEN '40001 TO 49999'
	WHEN s.salary BETWEEN 50001 AND 59999 THEN '50001 TO 59999'
	WHEN s.salary BETWEEN 60001 AND 69999 THEN '60001 TO 69999'
	WHEN s.salary BETWEEN 70001 AND 79999 THEN '70001 TO 79999'
	WHEN s.salary BETWEEN 80001 AND 89999 THEN '80001 TO 89999'
	WHEN s.salary BETWEEN 90001 AND 99999 THEN '90001 TO 99999'
	WHEN s.salary BETWEEN 100001 AND 109999 THEN '100001 TO 109999'
	WHEN s.salary BETWEEN 110001 AND 119999 THEN '110001 TO 119999'
	WHEN s.salary >= 120001 THEN '120001+'
	END AS salary_cat
FROM employees AS e
JOIN salaries as s
ON (e.emp_no = s.emp_no)
	JOIN titles AS t
	ON (e.emp_title_id = t.title_id)
ORDER BY s.salary
;

